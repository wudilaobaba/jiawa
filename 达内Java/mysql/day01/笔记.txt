数据库
IO流文件存储数据的弊端
  1.存储效率低
  2.不管存还是取都比较麻烦
  3.一般只能存小量的字符串数据
DB(database)数据库
  什么是数据库：数据库实际上就是一个文件集合
  数据库就是一个存储数据的仓库，本质就是一个文件系统，数据库是按照特定的格式把数据存储
  起来，用户可以对存储的数据进行增删改查操作
DBMS(dataBaseManagementSystem) 数据库管理系统(软件)
  什么是DBMS：用来管理数据库文件的软件，用户需要访问DBMS对数据进行增删改查操作
  常见DBMS：MySQL orical DB2 sqlite sqlserver
数据库的分类
  1.关系型数据库：经过数学理论验证，可以保存现实生活中的各种关系数据，数据库中存储数据
    以表为单位
  2.非关系型数据库：通常用来解决特定的需求，如数据缓存、高并发访问。存储数据的形式有多种，
    举例：Redis数据库(非关系型数据库),通过键值对的形式存储数据。
主流关系型数据库介绍
  1.MySQL: 2008年被sun收购，2009sun被oricle收购，开源免费。到oracle后，MySQL发布了5.0版本
    (使用oracle核心技术，性能提高30%),因为Oracle数据库地位受到威胁，计划把mysql闭源，
    原mysql的作者们不干了，原程序员出去单干，发布了MariaDB数据库(其实就是mysql),名字是
    因为作者的女儿叫Maria,MySQL市场排名第一
  2.Oracle: 闭源，最贵，性能最高，拉里埃里森  市场排名第二
  3.SQLserver:微软的  市场排名第三，主要应用在.net(C#)开发的
  4.DB2: IBM公司 有完整的解决方案(操作系统、webserver/如tomcat/，数据库等)，主要应用在
      银行等大型企业中
  5.sqlite：轻量级数据库，只有几十k，一般应用在嵌入式和移动设备中
开源和必源的区别：
  开源：开放源代码，盈利方式靠卖服务(赚钱慢-少)
      用户群大，大牛程序员会无偿的帮着升级维护
  闭源：不开放源代码，盈利方式靠卖产品和服务(赚钱快-多)
      大牛们各种攻击找漏洞
数据库的安装 ：https://blog.csdn.net/bobo553443/article/details/81383194
  MySQL 端口号是3306   SQL Structured Query Language  结构化查询语言
  sql是写在客户端，执行在DBMS中，DBMS解析后执行
打开数据库客户端，并登录
  终端中执行以下命令 mysql -uroot -p 两次回车
  退出数据库 exit; 或 \q
数据库相关的sql语句  ***指令后面必须加分号
  1.查看所有数据库        show database;
  2.创建数据库            create database 数据库名称;
  3.查看数据库详情        show create database 数据库名称;
  4.创建数据库指定字符集   create database 数据库名称 character set utf8;
                         create database 数据库名称 character set gbk;
  5.删除数据库            drop database 数据库名称;
  6.使用数据库            use 数据库名称;
和表相关的SQL
  什么是表：关系型数据库中保存数据的单元，类似于Excle中的表，创建表时需要指定字段信息
  1.创建表
    格式：create table 表名 (字段1名 字段1类型，字段2名 字段2类型);
          create table person (name varchar(10),age int);
                                    //10个字符的字符串
  2.查询所有表
    show tables;
  3.查看单个表的属性
    show create table 表名
表的引擎：engine
  1.Myisam: 只支持数据基础的增删改查，不支持高级操作，如：事务、外键等
  2.InnoDB: 支持高级操作，默认为InnoDB
创建并且指定引擎和字符集
  create table t1(id int, name varchar(10)) engine=myisam charset=gbk;
查看表字段信息
  desc 表名;
对创建好的表进行修改
  修改表名：rename table 原名 to 新名
修改表属性(引擎和字符集)
  alter table 表名 engine=myisam charset=gbk;
添加表字段
  追加字段
    alter table 表名 add 字段名 字段类型;
  在前面添加字段
    alter table 表名 add 字段名 字段类型 first;
  在某个字段的后面添加
    alter table 表名 add 字段名 字段类型 after 已有字段名;
删除表字段
  alter table 表名 drop 字段名;
修改表字段名和类型
  alter table 表名 change 原字段名 新字段名 类型;
修改表字段类型和位置
  alter table 表名 modify 原字段名 新字段类型 first/ after 原字段名;
删除表
  drop table 表名;


***查询：
  is null
    1.查询没有上级领导的员工编号，姓名，工资
      select empno,ename,sal from emp where mgr is null;
    2.查询emp表中没有奖金(comm)的员工姓名，工资和奖金
      select ename,sal,comm from emp where comm is null;
  is not null  不为null
    1.查询emp表中没有奖金的员工所有信息
      select * from emp where comm is not null;

  别名
    1.查询emp中所有姓名。将ename显示为'姓名'
      select ename as '姓名' from emp;
      select ename '姓名' from emp;
      select ename 姓名 from emp;  -->推荐！！！
  去重
    查询emp表中出现的所有职位
      select job from emp;  //所有的，包含重复的
      select distinct job from emp;

数据相关的SQL
  表中插入数据
    - 全表插入：
     insert into 表名 values (1,'王泓钧',88,20,59); //顺序、类型必须一致
    - 指定字段插入：
     insert into 表名 (id,name) values (2,'李四
    - 批量插入
      insert into student values(6,'唐僧',56,59,22),(7,'八戒',96,23,92);
      insert into student(id,name) values(8,'花在'),(9,'太白');
    -查询全部字段信息
      select * from student
    -查询执行字段
      select id,name from student;
    -条件查询
      select * from student where id<5;
    -修改数据
      update 表名 set 字段名a=字段值b;//所有字段a都变成b了
      update 表名 set 字段名a=字段值b where id=5;
    -删除数据
      delete from student;//删除全表数据，清空该表
      delete from student where id=7;
主键约束：
  给主键添加约束，起到非空并且唯一的作用，主键指表示数据唯一性的字段，
  一张表中主键字段只有一个
  主键就是唯一标识
  如何使用：
    create table t1(id int primary key, name varchar(10)); //
  主键约束+自增：
    create table t2(id int primary key auto_increment, name varchar(10));
    insert into t2 values (null,'貂蝉');
    insert into t2 (name) values('吕布');
    可以自定义不存在的主键的值
    主键的值会以曾经存在过的最大值进行+1
    自增总结：
      1.表内自增的数值，只增不减
      2.清空表的数据，数值不归零，继续增长
      3.数值以出现过的最大值的基础+1
注释 comment
  可以在创建表添加字段的时候对字段进行介绍，便于以后查看表的时候知道每个字段的作用
  如何使用：
    create table t3(id int primary key auto_increment comment '这是主键',name varchar(10),comm int comment '这是奖金');
    show create table 表名;//可以看见注释内容
`和'的区别
  `的作用是用来修饰表名和字段名，可以省略
  '的作用是用来修饰字符串的
数据冗余
  什么是冗余？如果设计表不够合理，随着数据量的增多，出现大量的重复数据，称为数据的冗余。
  练习：创建商品表
    category_id 分类id
      create table item(id int primary key auto_increment,name varchar(10),price int,num int,category_id int);
    创建分类表：
      create table category(int id primary key auto_increment, name varchar(10));
    insert into category values(null,'手机'),(null,'电脑');
    insert into item values(null,'苹果手机',5888,200,1),(null,'dell电脑',4000,150,2),(null,'联想电脑',3500,100,2);
    给分类表添加上级id字段
      alter table category add parent_id int;
    插入一条办公耗材分类下的打印机分类下的惠普打印机，价格2300，库存20
      insert into category values(null,'办公耗材',null);
      insert into category values(null,'打印机分类',3);
      insert into item values(null,'惠普打印机',4);
事务
  事务是数据库中执行SQL语句的最小工作单元
  (数据库客户端可以自动提交也可以手动提交，防止突然断电带来的问题)
  如何开启事务：关闭客户端自动提交，改为手动提交。把多次修改数据库的SQL放在一次提交中，
  则多次操作数据库的sql就相当于是放到了同一个是务中。
  数据库默认的提交方式是自动提交。
  没有事务是如下过程：如果第一次提交中断(断电)，则数据库中的数据会异常
    超人+300   update person set money=500 where id=1;
    蝙蝠侠-300 update person set money=9500 where id=2;
  有事务的过程： 只要不提交，数据库中的数据就不会改变
    step1.关闭自动提交
    step2.超人+300;
    step3.蝙蝠侠-300;
    step4.手动提交
    以上代码就算中间异常中断，结果要么同时成功，要么同时失败
  为什么使用事务？
    如果不使用事务，客户端会自动提交，多次操作数据库做某一件事的时候(如转账)，会出现部分
    成功，部分失败，则数据会出现异常。
    使用事务，把多次操作数据库的sql合并到一次提交中，这样就能保证同时成功或失败。
  使用事务的执行过程：
    关闭自动提交
    执行多次sql(此时在内存中执行)
    手动提交
  查看客户端自动提交的状态：
    show variables like '%autocommit%';
  关闭自动提交,仅对当前窗口生效！！！
    set autocommit=0;  //1为自动提交
  验证转账流程
    创建表：create table person(id int  key auto_increment,name varchar(10),money int);
    插入数据：insert into person values()
    关闭自动提交 set autocommit=0;
    转账:update person set money=500 where id=1; //再打开一个终端money就不会变
         update person set money=9700 where id=2; //再打开一个终端money就不会变
         以上两部都是在内存中，并未提交
    手动提交：commit;
  数据回滚- 执行rollback会将数据回滚到上次提交(执行commit)的点，只要没commit就可以使用
    rollback;
  设置回滚点：
    savepoint xxx;保存回滚点
  回滚到指定的回滚点：
    rollback to xxx;
SQL分类
  DDL (Data Definition Language) 数据定义语言
    create,alter,drop,truncate
    以上都不支持事务
  DML (Data Mauipulation Language) 数据操作语言
    insert,update,delete,select(DQL)
    以上都支持事务
  DQL (Data Query Language) 数据查询语言
    包括：select
    和事务没关系
  TCL (Transaction Control Language) 事务控制语言
    包括：commit rollback savepoint
  DCL (Data Control Language) 数据控制语言
    分配用于权限先关的sql
truncate:删除表并且创建一个新表
  用法:truncate table 表名;
drop,truncate,delete的区别：
  delete:删除表中的数据，自增数字不清零，支持事务
  drop:直接删除表 不支持事务
  truncate:删除表并且创建一个新表，自增数值清零，不支持事务
  对数据的操作才支持事务
数据库的数据类型
  五种数据类型分别为：
    整数
      常用 int(m) bigint(m) ,m代表显示长度,不足m位则在前面补零
      int(5)  23      查询的显示为：00023
      int(5)  123456  查询的显示为：
      若想要有补零的效果，则必须和zerofill关键字结合使用，使用方式如下:
        create table t_int(num int(10) zerofill);
        insert into t_int values(25);
        select * from t_int;
    浮点数
      常用：
        double(m,d)  m代表总长度，d代表小数长度
          75.233， double(5,3);
          create table t_double(num double(5,3));
          insert into t_double values(12.3456); 小数超过d位则四舍五入
          insert into t_double values(1.34);  小数不足d位则补零
        decimal(m,d)  m代表总长度，d代表小数长度.超高精度小数，需要涉及超高精度运算的时候使用。
    字符串
      char(m)     m代表字符长度，固定长度 char(10) ,执行效率高，不用改变长度，最大长度为255
      varchar(m) 可变长度，会根据内容长度改变自身长度，更节省资源 最大长度65535，如果长度超过255建议使用text
      text:可变长度，最大值65535
    日期
      date:只能保存年月日
      time:只能保存时分秒
      datetime:年月日时分秒 默认值为null 最大值9999年12月31日
      timestamp:年月日时分秒 默认值为当期时间，最大值为2038年1月19日
      测试：
        create table t_date (t1 date,t2 time,t3 datetime,t4 timestamp);
        insert into t_date values('2019-05-09',null,null,null);
        insert into t_date values(null,'12:12:50','2019-05-06 12:45:59',null);
    其他
编码问题：
  -sql语句在客户端中写完后需要通过网络发送给数据库服务器，这时需要字符的编解码，数据库
  保存数据时也需要字符的编解码。win系统，在命令行中执行set names gbk; 通知数据库客户端传过去的内容需要使用gbk进行解码
