###视图
  什么是视图：数据库中表和视图都是其内部的对象，视图可以理解成一个虚拟的表，
    视图本质就是取代了一段sql查询语句
  创建视图 create view v_emp_10 as (select * from emp where deptno=10);
          show tables可以看到刚才创建的视图
          注意：数据只有一份，视图的数据发生变化，原表的数据也会发生变化，反之亦然
      可以通过视图来隐藏原表中的部分字段，如隐藏emp表中的sal字段
        create view v_emp_nosal as (select empno,ename,job,deptno,mgr from emp);
   为什么使用视图：
     因为有些数据的查询需要使用大量的sql语句，每次书写比较麻烦，使用视图可以起到sal重用
     的作用，还可以隐藏表中的敏感信息
   如何使用：
     格式：create view 视图名 as 子查询;
     练习1.创建部门是20并且工资小于3000的视图
     练习2.创建每个部门的工资总和，平均工资，最高工资，最低工资的视图

####视图的分类
  1.简单视图
    创建视图的自查询中不包含：去重，函数，分组，关联查询的视图称为简单视图。可以对数据
    进行增删改查操作
  2.复杂视图
    创建视图的自查询中包含：去重，函数，分组，关联查询的视图称为复杂视图。仅可以进行查
    的操作
  也就是说，只能修改原数据！！！！！！！！！！！！！
####简单视图的增删改操作，操作方式和table一样
  1.插入数据：（如果插入的数据在视图中不显示但是在原表中显示，称为数据污染）
    insert into v_emp_10 (empno,ename) values(7777,'Mike'); //错误写法
    //因为v_emp_10的数据全是10号部门的，所以一定要加部门编号为10
    insert into v_emp_10 (empno,ename,deptno) values(7777,'Jery',10);//正确写法
    可以通过'with check option'关键字禁止出现数据污染
    create view v_emp_30 as (select * from emp where deptno=30) with check option;
    此时如果插入的数据不包含deptno=30,则会报错，如：
    insert into v_emp_30 (empno,ename) values (7777,'Mike');//错误
    insert into v_emp_30 (empno,ename,deptno) values (7777,'Mike',30);//正确
  2.修改数据：（只能修改视图中存在的数据，所以不会出现数据污染）
    update v_emp_30 set ename='张三' where empno=7777;
    update v_emp_30 set ename='张三' where empno=7369; //7369是二号部门的人，所以
    无法在v_emp_30视图中进行修改，所以更不会修改到原表数据
  3.删除数据：（只能删除视图中存在的数据，所以不会出现数据污染）
    delete from v_emp_30 where ename='张三';
    delete from v_emp_30 where ename='smith';//smith是二号部门的人，所以
    无法在v_emp_30视图中进行删除，所以更不会修改到原表数据
####修改视图信息
  格式：create or replace view 视图名 as 子查询;（视图名存在就自动替换，不存在就自动新建）
####删除视图
  drop view 视图名;
  drop view if exists 视图名;  视图名不存在也不会报错
####视图别名
  创建视图的时候子查询对字段起了别名，则后期对视图进行操作只能使用别名
    create view v_emp_10 as (select empno,ename name from emp);
    update v_emp_10 set name='TTT' where empno=7778; //正确
    update v_emp_10 set ename='TTT' where empno=7778; //错误

###约束
  什么是约束：约束是给表字段添加的限制条件
####非空约束 not null
  字段值不能为null
  create table t1 (id int primary key auto_increment,age int not null);
####唯一约束 unique
  字段值不能重复
  create table t1(id int primary key auto_increment,age int unique);
####主键约束
  主键的字段不能重复也不能为null
  创建表的时候添加主键
    create table t_pri1(id int primary key auto_increment)
  创建表后添加主键
    create table t_pri2(id int);
    desc t_pri2;
    alter table t_pri2 add primary key (id);
    desc t_pri2;
  删除主键 一个表只能有一个主键
    alter table t_pri2 drop primary key;
    desc t_pri2; //key里就没有值了
###自增
  当字段的值为null的时候数值自动+1
  删除数据数值不减
  如果插入数据指定比较大的值，下次从最大值基础上+1，如果删除最大值，也是从曾经出现的最大值
  基础上+1
  使用delete删除全表数据，自增值不变
  使用truncate删除，自增数值清零
###默认约束
  当字段的值不赋值的时候，默认约束的内容生效
  create table t_def(id int,age int default 10);
  insert into t_def (id) values (10);
###检查约束 check
  mysql语法支持 不报错 但是没有效果
  create table t_check(id int,age int check(age>10)); //并没有起作用
###外键约束
  作用：
    1.外键值可以为null,可以重复,但是不能是不存在的值
    2.外键指向的表，不能先删除
    3.外键指向的数据不能先删除，如果需要删除，先删除外键约束或先删除外键的数据(断开关联关系)
    使用外键必须要求两张表相同的innodb引擎，myisam引擎不支持外键约束
    除非特定情况，一般工作中不适用外键约束！！！使用java代码通过逻辑对插入和删除的数据进
    行限制，因为加了外键约束后，不方便测试
####如何使用外键约束
  创建db6数据库
  1.创建部门表
    create table dept(id int primary key auto_increment,name varchar(10));
    insert into dept values(null,'神仙'),(null,'妖怪');
  2.创建员工表
    create table emp(id int primary key auto_increment,name varchar(10),deptid int,constraint fk_dept foreign key(deptid) references dept(id));
                                                                                                外键约束名 外键约束 (约束字段)   引用    表名(主键)
    insert into emp values(null,'悟空',1); //成功
    insert into emp values(null,'赛亚人',3);//失败
    drop table dept; //此时删除会失败
    delete from dept where id=1;//此时删除会失败
###索引
####导入数据
  linux:source /home/soft01/desktop/item_backup.sql
  win:  source d:/item_backup.sql
  测试：
    1.show tables;//看是否有item2的表
    2.select count(*) from item2;//看是否有172万条
    3.select * from item2 where title='100';//查看查询时间是多少
  什么是索引：索引是数据库中用来提高查询效率的技术，类似于目录
  为什么使用索引？如果不使用索引，数据会零散的保存在磁盘块中，查询数据要挨个遍历每一个磁盘块，
  知道找到数据为止；使用索引后，会在磁盘中以树状结构对数据进行保存，查询数据时会大大降低
  磁盘块的访问量，从而提高查询效率。
  索引原理图.png(了解)
####索引是越多越好吗
  索引会占用磁盘空间，只对常用的查询字段创建索引！！！！！！！
####有索引就一定好吗
  不一定，如果数据量比较小，使用索引反而会降低查询效率
####索引的分类
  1.聚集索引：一张表只用一个聚集索引，数据库会自动为添加了主键的表创建聚集索引，一般情况下
    聚集索引就是通过主键值创建的索引，聚集索引的树状结构中保存了数据。
  2.非聚集索引：
    一张表只用多个非聚集索引，通过非主键字段创建的索引称为非聚集索引，非聚集索引中不会保存数据，
    保存的是磁盘块的地址
###如何创建索引
  格式：create index 索引名 on 表名(字段名(长度));
  创建title索引:create index index_item2_title on item2(title); //添加索引后，查询时间缩短
####查看索引
  show index from 表名
####删除索引
  drop index index_item2_title on 表名
####复合索引
  通过多个字段创建的索引称为复合索引
  应用场景：频繁使用多个字段进行作为查询条件时，可以为这几个字段创建一个复合索引
  创建格式：create index index_item2_title_price on item2(title,price);
####尽量不要在频繁修改的表中创建索引，在频繁查询的表中添加索引

###事务
  数据库中执行sql语句的最小单元，不能拆分，执行同一业务的sql语句可以保证全部成功或全部失败
###事务的ACID特性 (面试常考)
  Atomicity:原子性，最小不可拆分 全部成功或全部失败
  Consistency:一致性，从一个一致状态到另一个一致状态 (多张表关联，一个表变换了，其他表的关系也一定要发生变化)
  Isolation:隔离性，多个事物之间互不影响
  Durability:持久性，事务完成后数据提交到数据库中持久保存
####事务相关指令
  show variables like '%qutocommit%';
  set autocommit=0;
  set autocommit=1;
  commit;
  rollback;
  savepoint s1;
  rollback to s1;
