1.路径
2.URI 和 URL 的区别：  看'URI和URL的理解.png'
  1).狭义的理解：
    只在java项目中理解URI和URL
      URI:绝对路径
      URL:完整路径
    从表面上看URI包含了URL
  2).广义的理解：
    在任意的WEB项目中理解URI和URL
      URI:资源的名称
      URL:资源的真名
      URI包含了URL

如何配置servlet访问路径：
1.精确匹配
  举例：/abc
  只有访问/abc才能访问此Servlet
  适合规模很小的项目
2.通配符  注意：该方式无法通过getServletPath方法获取网名，需要根据相对路径获取到网名getRequestURI
  举例：/*
  所有路径都能访问此Servlet
  此Servlet能处理所有请求
  适合一个项目只写一个Servlet
3.后缀 建议！！！
  举例：*.hi    不允许以斜线开头   访问：http://localhost:8080/servlet4/sasa.hi
  所有以hi为后缀的请求都能访问此Servlet
  此Servlet能处理多个请求
  适合一个项目写少量的几个Servlet

  案例：在servlet3中新增加一个类，进行以通配符的形式判断路径进行在一个Servlet中进行操作




Servlet的生命周期
一个项目的中的<load-on-startup>1</load-on-startup>，中间的数字不能重复，数字越大，执行越靠后


ServletConfig 和 ServletContext
我们也可以使用web.xml作为配置文件，使用ServletConfig或ServletContext来读取该文件中的参数
ServletContext只有一份，其数据可以被多个Servlet所共享
ServletConfig有多份，其每一份中的数据对应一个Servlet
类比：Servlet学生  ServletContext教室  ServletConfigTTS账号
作用：
  见：“ServletConfig 和 ServletContext.png”
区别：
  ServletConfig：
    ServletConfig和Servlet是一对一的关系，Tomcat在初始化每个Servlet之前给它创建一个ServletConfig
      举例：调用HiServlet.init ()前给它创建一个ServletConfig
           调用HelloServlet.init ()前给它创建一个ServletConfig
      如果想给某个Servlet预置数据，使用ServletConfig
  ServletContext：
    ServletContext和Servlet是一对多的关系，Tomcat在启动是就自动创建唯一的ServletContext
    所有的Servlet都可以共享ServletContext对象中的数据
    如果想给多个Servlet预置数据使用ServletContext
应用：
  ServletConfig：servlet5/LoginServlet.java
    假设开发一个页游，当用户数超出最大在线人数时要排队
    登录时，判断是否已达到最大人数
    登陆：LoginServlet
    最大人数：maxOnline
    该参数只给LoginServlet自己用，用ServletConfig读取即可，别人不用

  ServletContext：servlet5/FindEmpServlet.java  servlet5/FindDeptServlet.java
    软件内有很多查询功能，都带有分页功能
    select * from emp limit (3-1)*10,10; //查询第三页，每页10条
    每页显示的条目是常量，是可以配置的
    该数据在多个查询功能之间公用，使用ServletContext读取

  ServletContext的特殊用法：servlet6
    前提：之前使用ServletConfig和ServletContext读取的是常量，
    而ServletContext还有能力读写变量，用该对象读写的变量是可以被所有Servlet共用的
    setAttribute()读变量  getAttribute()写变量
    案例：开发流量统计的功能，无论访问哪个功能，流量+1
         由于流量是变量，并且在多功能间共用，所以用ServletContext来读写

在web.xml中配置ServletConfig
<init-param>
	<param-name></param-name>
	<param-value></param-value>
</init-param>

在web.xml中配置ServletContext
<!-- 在标签外配置的参数是给所有Servlet公用的参数，它们都可以通过ServletContext读取该参数 -->
<context-param>
	<param-name>size</param-name>
	<param-value>20</param-value>
</context-param>

总结：
  当需要给Servlet预置参数的时候使用这样的对象
  若参数只给一个Servlet使用 - 用ServletConfig
  若参数要给多个Servlet共用 - 用ServletContext

Servlet线程安全问题
  1.同时修改局部变量
    局部变量存在与栈内，每个线程有自己的栈针，此时没有线程安全问题
  2.同时修改成员变量
    成员变量存于堆内，所有线程共享这样的数据，此时存在线程安全问题
  3.解决方案
    加锁，servlet6/UpServlet.java

JSP: jsp本质上就是servlet  最终会把jsp转换(翻译)为servlet的.java文件
  注意：jdk1.8要与tomcat9配合使用
  在一个web项目中的webapp中创建.jsp文件
  修改jsp文件后，直接刷新页面即可更新内容
  在apache-tomcat-9.0.27中的work文件加中可以找到翻译后的.java文件

补充：
  在一个类上ctrl+T 可以看到这个类的继承关系
  Ctrl+Shift+T 可以搜索各种类，再点击左侧黄色的双向箭头图标，可以定位到该类具体在哪个包中
  Ctrl+O 查看这个类的基本信息，绿色的public  黄色是protected  红色是private
