正课：
1.static final常量：static final修饰的就叫做常量   应用率很高
  1)必须声明同时初始化 ， 常量一般用public修饰  public static final配套
  2)常用类名点来访问,不能被改变
  3)建议常量的所有字母要大写，多个单词用下划线连接
  4)编译器在编译时，会将常量自动替换为具体的值，效率高，不需要分配方法区等 类不会被加载
  5)何时用：数据经常使用，并且还永远不变(如3.14)
2.抽象方法：
  1)由abstract修饰,必须存在于抽象类中
  2)只有方法的定义，没有方法体 如： public abstract void step();
3.抽象类：(一定是个超类)
  1)由abstract修饰 如abstract class A{}
  2)包含抽象方法的类必须是抽象类
    不包含抽象方法的类也可以声明为抽象类--------我乐意(意义不大)  如new Flyer();//永远也用不到
  3)不能被实例化，即不能new
  4)抽象类是需要被继承的(铁定要被继承)，派生类：
    4.1)派生类一定要重写抽象类中的所有抽象方法----变不完整为完整(常用)
    4.2)将派生类也作为抽象类--------------------不常用
  5)抽象类的意义：//抽象方法必须重写
    5.1)封装派生类所共有的属性和行为------------代码复用
    5.2)为所有的派生类提供统一的类型------------向上造型  向上造型后能点出来什么要看超类,如果超类没有抽象方法step，那么就点不出来，在派生类中写了step方法也点不出来
    5.3)可以包含抽象方法，为所有派生类提供统一的入口
        派生类具体实现不同，但入口是一致的(5.2的总结)
  new Flyer();//编译错误  new Flyer[2];//也正确
  Flyer o;正确(可以声明，不能new对象)

  abstrict class Flyer {
    abstract void step();//不完整
  }
  class Plane extends Flyer{
    void step(){//变不完整为完整
      //。。。
    }
  }
  或 不重写抽象方法
  abstrict Plane extends Flyer{
    //将派生类也作为抽象类 一般不这么用
  }

设计规则：
  1)将所有派生类所共有的属性和行为，抽到超类中------抽共性
  2)在超类中：
      所有派生类"共有的行为"的实现方式都一样，设计为普通方法
      所有派生类"共有的行为"的实现方式都不同，设计为抽象方法
  3)根据static的使用情境来判断要不要使用static关键字
  4)将部分派生类所共有的行为设计在接口中(符合既是也是的原则，就用接口)
    比如：子弹打掉小敌机------得1分   只有打小敌机和大敌机的时候能得分，他们两个得分的行为要放在接口中，再让他们两个实现
         子弹打掉大敌机------得2分

abstract必须继承
final 不能继承


一定要注意：实例方法里面是有this的！！！！！！！！            超类里面放所有子类共有的！！！！！！！！！
一定要注意：实例方法里面是有this的！！！！！！！！            超类里面放所有子类共有的！！！！！！！！！
一定要注意：实例方法里面是有this的！！！！！！！！            超类里面放所有子类共有的！！！！！！！！！




画对象
01.想画对象得先得到对象的图片，每个对象都能得到图片，意味着得图片的行为是所有派生类所共有的，所以将得图片的行为设计在超类中
   每个对象得图片的行为都是不一样的，要设计为抽象方法
   ------在Flyobject中设计抽象方法getImage()
02.获取图片时，需要去考虑对象的状态，因为需要在不同状态下来得到不同的图片
   每个对象都有状态(三种)，所以将状态设计在超类中
   状态在实际项目中一般都设计为常量
   ------在Flyobject中设计LIFE DEAD REMOVE三种状态常量 + state当前状态变量
   每个对象都需要去判断它当前所属的状态，所以将判断状态的行为设计在超类中，因为每个对象判断状态的行为都是一样的，所以设计为普通方法
   ------在Flyobject中设计isDead() isLife() isRemove()
03.在派生类中重写getImage()
   03.1)天空：直接返回image
   03.2)子弹：若活着的，直接返回image;若死了，直接删除
   03.3)英雄机：若活着呢，返回image[0]和image[1]切换
   03.4)小敌机、小蜜蜂、大敌机：
        若活着呢 返回image[0]
        若死了呢 返回image[0~4] 4后删除

   对象的图片的描述：
   001天空：直接返回image一张图片
   002子弹：
      002.1)若活着呢，直接返回image
      002.2)若子弹与敌人撞了，则删除
   003英雄机：
      003.1)若活着呢，返回images[0]和images[1]切换
   004小敌机
      004.1)若活着呢，返回images[0]
      004.2)若死了呢，返回images[1]~[4]轮换 [4]后删除
   005大敌机
      005.1)若活着呢，返回images[0]
      005.2)若死了呢，返回images[1]~[4]轮换 [4]后删除
   006小蜜蜂
      006.1)若活着呢，返回images[0]
      006.2)若死了呢，返回images[1]~[4]轮换 [4]后删除
   对象分三种状态：
    1)活着的
    2)死了的(没有删)//没有爆破效果则无该状态
    3)删除的

04.准备好图片之后，可以开画了，每个对象都能画，画的行为是一样的，设计为超类的普通方法
   -----在FlyingObject设计给对象画图片的方法paintObject()
05.天空要画两张图，所以要重写paintObject()
   -----在Sky中重写paintObject() 画两次
06.World中调用画图片的方法paintObject即可
   -----在World中重写paint()
