正课：
1.引用类型数组  ***给引用类型的变量赋值一定要new！！！！！！！！！！！！！！！！！！
               ***引用类型的值为null,那么它的地址就没有了,说明它什么也不指向
  1)
    int[] a = new int[2];
    基本类型数组给元素赋值 a[0] = 100;

    //声明Student数组a,包含2个元素，每个元素都是Student型，默认值为null
    Student[] a = new Student[2];//--->引用类型的数组，每个元素的默认值为null
    引用类型数组给元素赋值 ：
      a[0] = new Student(); //创建Student对象
      a[1] = new Student(); //创建Student对象
      a[2] = new Student(); //创建Student对象
      a[1].age = 25;
    ***给引用类型赋值一定要new
    ***引用类型中存的都是地址
  2)
    Student[] s1 = {
      new Student(),
      new Student(),
      new Student()
    }
    Student[] s2 = new Student[]{
      new Student(),
      new Student(),
      new Student()
    }
  3) 数组的数组(专业叫法)
    int[][] arr = new int[3][];//数组类型的数组初始的时候要将数组的个数写在第一个中括号中
    arr就是int[][]类型
    //每个元素都是int型的数组，每个元素的默认值为null
    arr[0] = new int[3];
    arr[1][0] = 100;
  4)如果int[][]中的每个元素的长度都相同，那么可以简写为以下：
    int[][] arr = new int[3][4];//三行四列  矩阵型数组
    //给arr中的每个最小级别的元素赋值为10；
    for(int i=0;i<arr.length;i++){
      for(int j=0;j<arr[i].length;j++){
        arr[i][j] = 10;
      }
    }
2.继承
  代码不用自己写，自己也能用
  class Student extends Persion{--------->派生类
    void Study(){}
  }
  class Teacher extends Persion{--------->派生类
    void Teach(){}
  }
  class Doctor extends Persion{--------->派生类
    void Work(){}
  }
  class Person{ ---------->超类/基类
    String name;
    int age;
    String address;
    void eat(){}
  }
  Student zs = new Student();
  zs.eat();//此时Persion类中的变量和方法都可以由zs来使用

  //继承的传递性
  class Aoo{  -------------------- a
    int a;
  }
  class Boo extends Aoo{ --------- a+b
    int b;
  }
  class Coo extends Boo{ --------- a+b+c
    int c;
  }

  1)作用:代码复用
  2)通过extends来实现继承
  3)超类：存放所有派生类所共有的变量和方法  --------> 所有类中共有的成员变量方法才被抽入到超类中！！！！！！！
    派生类：存放派生类所特有的变量和方法
  4)派生类继承超类后，派生类具有：派生类的+超类的
  5)一个超类可以有多个派生类，但是一个派生类只能有一个超类----单一继承
  6)继承具有传递性
  7)*** java规定：构造派生类之前，必须先构造超类 ***  非常重要！！！！！！！
    (也就是说先有超类后才能有派生类，即：调用派生类的构造函数(初始化派生类)之前，必须先调用超类的构造函数(初始化超类))
    在派生类的构造方法中，若自己不主动去调用超类的构造方法，则默认有个super()来无形之中调用超类的无参构造方法  看day04英雄机
    在派生类的构造方法中，若自己主动去调用超类的构造方法，则不再默认提供
    super(实参)调用超类的构造方法时，必须位于'派生类构造方法'的第一行
    super()中无参的话，不用自己写super(),程序会自动调用超类的'无参'构造函数,有参的构造函数就不会去调用了(所有类中都默认有一个与该类同名的无参构造函数,只要new 类名()就会自动调用，前面讲过)
    上一行的描述相当于在派生类的构造函数第一行默认写了super()
    实际运用见project/day05中FlyingObject超类的使用，将重复的以下代码写在超类的构造函数中：
    Random rand = new Random();
		this.width = width;
		this.height = height;
		this.x = rand.nextInt(400-width);
		this.y = -height;

3.super关键字：指代的是当前对象的超类对象
  super的用法：
    1)super.成员变量名---->访问当前的超类的成员变量
      若当前类中使用了超类的成员变量，那么默认在该类中的超类成员变量的前面加了super. 看day04英雄机
      建议，再类中访问类自己的成员变量在前面加this.;在类中访问超类的成员变量在该类中的超类成员变量前加super.
        但是与局部变量不同名的话还是可以省略的，同名的话不能省略
      能用super.的就能用this.
    2)super.方法名()----->调用当前超类中的方法
    3)super()----->调用超类的构造方法
4.
只有继承才考虑super !!!!!!!!!!!!!!!!!!!!!
A类都继承了，那么创建出来的对象自然就有超类中的变量和方法,超类中的属性和方法就是A类中的！！！不用纠结了

补充：
一、内存的管理:由JVM来管理
1)堆：存放了所有new出来的对象 + 实例变量
2)栈：存放了局部变量(也就是方法里的变量,也包括方法中的参数)，注意有引用类型的变量
3)方法区：存放所有.class字节码文件 + 方法 + 静态变量
二、
null:空 没有指向任何地方
引用类型的值为null,那么它的地址就没有了,说明它什么也不指向
若引用的值为null,则该引用不能进行任何操作
若操作，则发生NullPointerException 空指针异常
所以：一旦报了"空指针异常",那么一定有引用类型的值为null了
