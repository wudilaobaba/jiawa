正课：
1.向上造型
  1)超类型的引用指向了派生类的对象
  2)能点出来什么，要看引用类型(即o3,o3只能点Animal（超类）中的变量和方法) --- 注意111111111111111111
  //动物是动物
  Animal o1 = new Animal()

  //老虎是老虎
  Tiger o2 = new Tiger()

  //老虎是动物
  Animal o3 = new Tiger()//正确，这就是向上造型

  //动物是老虎
  Tiger o4 = new Animal();//编译错误

  class Animal{}
  class Tiger extends Animal{}
2.方法的重写(重新写/覆盖)Override
  1)发生在父子类中,方法名相同,参数列表相同,方法体不同
  2)重写方法被调用时，要看对象的类型(即调的是对象中方法，若对象中有该方法，则调用派生类中的该方法，否则调用超类中的该方法) --- 注意222222222222222222222
  注意事项：
    重写需要遵循"两同两小一大"的原则：
      两同：方法名相同；参数列表相同
      两小：
        派生类方法的返回值类型要小于或等于超类方法的；
          void时：必须相等(超类是void，派生类必须是void)
          基本类型时：必须相等(超类是int，派生类必须是int)
          引用类型时：小于或等于(超类大，派生类小)
        派生类方法中抛出的异常要小于或等于超类方法的
      一大：派生类方法的访问权限要大于或等于超类方法的(day05笔记中有解释)
3.重写与重载的区别(常见面试题)
  重写：
    1)发生在父子类中,方法名相同、参数列表相同、方法体不同
    2)遵循"运行期"绑定,看对象是什么类型再来调用方法
  重载：
    1)发生在一个类中,方法名相同、参数列表不同、方法体不同
    2)遵循"编译期"绑定,看参数是什么类型再来调用方法  -----"编译期"只检查语法，此时还没有对象呢
继承要符合is a的关系
A a = new B();//翻译为B对象是A类型的，即B是A

画窗口 swing相关：
C/S:客户端/服务器
B/S:浏览器/服务器------今后的发展方向
1)JFrame:窗口(相框)
2)JPanel:面板(相板)


补充：
fly[] f;
fly[] f = null;  -->上面两个效果一样，会报空指针

fly[] f = {};
fly[] f = new fly[0];  -->下面两个效果一样，不会报空指针

理解super在重写中的使用：(想在超类的方法上加一点东西的时候，就用super)
我继承了一个中餐馆:
A.还是想做中餐-------------------不需要重写
B.想改做西餐---------------------必须重写
C.想在中餐之上加西餐-------------需要重写(super中餐，再加西餐)


特殊的重载：
class Aoo{
  void show(){}
}
class Boo extens Aoo{
  void show(String name){} //这是重载！！！
}
