正课：
1.java的内存管理
  1)堆：
    1.1)用于存储new出来的对象和实例变量
    1.2)垃圾：没有任何引用所指向的对象
          垃圾回收器(GC)不定时到内存中清扫垃圾
          回收的过程是透明的(看不到的),不一定发现垃圾就立刻回收
          调用System.gc()可以建议虚拟机尽快调度GC来回收
    1.3)内存泄漏(没有引用指向就会被GC清理，如手动将对象置为null)
          不再使用的内存还没有被及时的回收(还有引用指向它，但是该对象我不会再使用了)
          严重的泄露会导致系统的崩溃
          建议：对象不再使用时及时将引用设置为null
    1.4)实例变量的声明周期:
          创建对象时在堆中，对象被回收时一并被回收
  2)栈:
    2.1)存储正在调用的方法中的所有局部变量(包括函数中的参数)
    2.2)调用方法时，在栈中为该方法分配一块对应的栈帧，
        栈帧中存储方法的局部变量(包括参数)
        方法执行结束后，栈帧被清除，局部变量一并被清除
    2.3)局部变量的声明周期
          调用方法时存储在栈中，方法结束栈帧被清除时一并被清除
  3)方法区:
    3.1)用于存储.class字节码文件(包括所有方法+静态变量)
    3.2)所有方法都只有一份(通过this来指明具体的调用对象)
2.面向对象三大特征：
  1.封装：
    1)类:封装的是对象的属性和行为
    2)方法:封装一段特定的业务逻辑功能
    3)访问控制修饰符：封装的是具体的访问权限
  2.继承：
    1)作用:代码复用
    2)超类:所用派生类所共有的属性和行为
      接口:部分派生类所共有的属性和行为
      派生类:派生类所特有的属性和行为
    3)具备传递性、单一继承、多接口实现  每个类系统都会自动加上extends Object  (Object是所有类的超类)
  3.多态：
    1)行为多态(所有抽象方法都多态)、对象多态(所有对象都是多态的)
    2)向上造型、强制类型转换(想访问派生类所特有的)、instanceof判断
    3)多态的表现形式有两种：
      3.1)重写：依据对象的不同来多态
      3.2)重载：根据参数的不同来多态
3.面向对象课程安排

4.画状态
  启动状态
  运行状态
  暂停状态
  结束状态

5.补充
实例变量：
  1)类中，方法外
  2)创建对象时存储在堆中，对象被回收时一并被回收
  3)有默认值
局部变量：
  1)方法中
  2)调用方法时存储在栈中，方法结束栈帧被清除时一并被清除
  3)没有默认值

当程序的运行结果与你预期的结果不同时，需要调试
  1.打桩
  2.Debug调试工具：
    1)添加断点
    2)四个键：
      2.1)f5:单步调试(会进到方法中)
      2.2)f6:逐过程调试(不会进入到方法中)
      2.3)f7:结束当前方法调试
      2.4)f8:跳到下一个断点，若后面无断点则结束调试
    3)会看两个东西
      3.1)会看变量
      3.2)会添加监视  选中a>10右键点击watch  里面可以加表达式看输出的值
  3.引用类型划等号
      1)指向同一个对象
      2)通过一个引用对数据的修改会影响另一个引用对数据的访问 看图片"引用类型划等号和基本类型划等号.png"
        eg:房子(对象)的钥匙(引用)  配一把钥匙(引用)   两个钥匙都能访问钥匙
  4.基本类型划等号
      1)赋值
      2)对一个变量的修改不会影响另一个变量
        eg:修改身份证复印件，不影响原件
