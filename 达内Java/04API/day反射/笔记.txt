反射
  1.是java的API，是java提供的现成的类 - 接受API提供的功能
  2.是java提供的动态执行机制，动态加载类，动态创建对象，动态访问属性，动态调用方法
静态与动态
  静态：事先约定的规则，执行期间按照固定规则执行
  动态：事先没有约定，在执行期间动态确定执行规则
    java中的静态执行：编译已经就确定了执行规则(执行次序)，在运行期间按照编译结果顺序执行
    java中的动态执行：运行期间才能确定加载哪些类，创建哪些对象，执行哪些方法
  业务需求：执行某个类中全部的以test开头的无参数无返回值的非静态方法
动态加载类：
  java提供了动态加载类的API
    Class cls = Class.ForName(包名.类名);
    如：
    Class cls = Class.ForName("demo.Foo");
动态创建对象：
  cls.newInstance(); //必须有无参构造器！！！！！
  执行cls引用的类信息中的无参构造器来动态创建实例，如果类没有无参数构造器，则抛出异常
  提示：反射可以调用有参构造器，
动态查询类的方法信息

使用invoke
  Object obj = method.invoke(对象,实参1,实参2); //调用method后的返回值


反射用途
  1.eclipse中解析类的结构使用了反射
  2.Junit识别被测试方法使用了反射
    Junit3利用反射查找test开头的方法
    Junit4利用反射解析@Test查找测试方法
  3.spring管理bean对象，注入Bean属性使用了反射
    利用反射创建bean对象实例，利用反射注入bean的属性
  4.注解的解析使用了反射
    利用反射API支持注解
  5.强行执行私有方法/属性

练习自己写一个注解@Whj
  项目中新建一个Annotation,名字为Whj
  注解若果被标注在方法上，那么就要获取该方法的信息

简单实现spring的bean mofangSpringBean项目  -  注意看一下泛型方法
从resource中读取文件的方法：InputStream in = getClass().getClassLoader().getResourceAsStream("whj.xml")
