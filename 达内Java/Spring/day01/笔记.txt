一、Spring是什么？
  是一个开源的，用来简化应用开发的框架
  简化开发
  spring对常用的api做了封装和简化(比如封装了jdbc，使用spring jdbc来访问数据库，就不再需要考虑获取连接和关闭连接了)
  管理对象
  Spring提供了一个容器，帮我们创建对象以及建立对象之间的依赖关系。这样做的好处是，降低
  对象之间的耦合度方便代码的维护。
  集成其他框架
    spring可以将其他的一些框架集成进来(比如，集成用于任务调度的框架Quartz)
    即：不发明重复的轮子
  spring是一个一站式的框架

二、spring容器(最重要的模块)
  1.spring容器是什么？
    是spring框架中的一个核心模块，用于管理对象
  2.启动spring容器(启动后就会自动读取xml配置文件，然后创建单例的实例)
    step01.导包 (spring-webmvc)
      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-webmvc</artifactId>
        <version>3.2.8.RELEASE</version>
      </dependency>
    step02.添加配置文件
      在src/main/resoures中创建一个xml文件applicationContext.xml
    step03.启动spring容器  FirstSpring类
  3.如何创建对象?
    方式一 使用无参构造器(重点)：
      step01.给类添加无参构造器(或缺省构造器)
      step02.配置<bean>元素
      step03.调用容器的getBean方法来获得对象。
    方式二 使用静态工厂方法(了解)
      通过类的静态方法来创建对象
    方式三 使用实例工厂方法(了解)
      通过调用对象的实例方法来创建对象
  4.作用域
    默认情况下，容器对于某个bean只会创建一个实例
    可以设置scope属性，值为prototype,这样，容器对于某个bean会创建多个实例
  5.生命周期
    初始化方法：使用init-method属性来指定初始化方法名
    注：spring容器创建对象之后，会立即调用初始化方法
    销毁方法：使用destroy-method属性来指定销毁方法(只用作用域为单例的时候，销毁方法才会起作用)
    注：spring容器在关闭之前，会先销毁对象，在销毁对象之前，会先调用对象的销毁方法
  6.延迟加载(了解)
    不延迟加载的话：spring容器启动之后，会将所有作用域为单例的bean创建好，并自动执行其初始化方法。
    设置延迟加载以后：spring容器启动之后，不会自动创建作用域为单例的bean。必须手动调用getBean方法才会创建
    指定lazy-init属性值为true,此时spring容器对于作用域为单例的bean就不会创建相应的实例了。
练习：
  写一个java类 ExampleBean
    要求：
      a.由容器来创建该对象
      b.有相应的初始化方法与销毁方法
      c.作用域为单例
      d.不使用延迟加载

三、IOC (Inversion Of Controll 控制反转)
  1.IOC是什么？
    对象之间的依赖关系由容器来建立(目标)
  2.DI(Dependency Injection 依赖注入)是什么？
    容器通过调用对象提供的set方法或者构造方法来建立依赖关系(达成目标)
    注：IOC是目标，DI是手段
  3.set方式注入
    step01.提供相应的set方法
    step02.配置property元素
    step03.
练习：
  LoginService类 与 AdminDAO类
  要求：
   a.由容器创建这两个对象
   b.采用set方式将AdminDAO类注入到LoginService中
  4.构造器方式注入
    step01.添加相应的构造器
    step02.配置constructor-arg元素
  5.自动装配(自动注入) - 了解
    指的是spring容器依据某种规则，自动建立对象之间的依赖关系
    注意：
      a.默认情况下容器不会自动装配
      b.可以通过指定autowire属性来告诉容器进行自动装配(容器仍然需要通过调用set方法或构造器来完成依赖关系的建立)
  6.注入基本类型的值(包含String)
    使用value属性即可
  7.注入集合类型的值
    List 有序， 以下无序
    Set 其中的元素不能重复，会自动去重
    Map
    Properties //是一个特殊的Map,他的value和key都是字符串
  8.引用的方式注入集合类型的值
  9.读取properties文件的内容
  10.使用spring表达式

  使用注解简化配置
  1.什么是组件扫描
    spring容器在启动之后，会扫描指定的包及其子包下面的所有的类，如果该类前面有指定的注解(比如:@Component)，则spring容器
    会将这个类纳入容器进行管理(相当于在配置文件中配置了一个bean元素)
  2.如何进行组件扫描
    step01.在类前添加特定的注解
      注：常见的注解：
        @Component
        @Service 业务层注解
        @Respository 持久层注解
        @Controller 控制层注解
    step02.要在配置文件中添加组件扫描的配置
  3.
  4.依赖注入相关的注解
      @Autowired和@Qualifier  联合使用
        a.该注解支持set方式注入和构造器方式的注入
        b.当采用set方式注入时，可以将@Autowired添加到set方法前面，如果不使用@Qualifier，则容器会使用byType的方式来注入，
          有可能出错，所以建议使用@Qualifier注解，以明确指定要注入的bean的id。
        注：也可以将这两个注解直接添加到属性前  
      @Resource (常用)
        a.只支持set方式注入

补充
  .properties文件
补充：单元测试
  导入junit包-在src/test/java中写测试类
  window-Show View - Outline - 右侧的类右键--Run as - JUnit Test
